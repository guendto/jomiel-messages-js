#!/usr/bin/env node
/*
 * -*- coding: utf-8 -*-
 *
 * jomiel-messages-js
 *
 * Copyright
 *  2021 Toni Gündoğdu
 *
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// "protobufjs library itself doesn't provide module support"
//  - <https://github.com/protobufjs/protobuf.js/issues/1230>

const { docopt } = require("docopt");
const execa = require("execa");
const { mkdir } = require("fs/promises");
const { sync: globSync } = require("glob");
const { dirname, basename, join } = require("path");

(async () => {
  const opts = docopt(`
Usage:
    gen-static [-h] -p <path> [-w <wrapper>] [-o <path>]

Options:
    -h --help                      Print this help and exit
    -p --proto-dir <path>          Specify path to the .proto files
    -w --wrapper <wrapper>         Use specified wrapper; default
                                    (cjs+amd), es6, commonjs, amd,
                                    closure [default: commonjs]
    -o --output-file <path>        Write output to the specified file
                                    [default: lib/index.js]`);

  const pattern = join(opts["--proto-dir"], "**/*.proto");
  const matched = globSync(pattern);

  if (matched.length === 0) {
    console.error(`error: ${pattern}: unable to find .proto files`);
    process.exit(1);
  }

  const pbjsArgs = [
    "--target",
    "static-module",
    "--wrap",
    opts["--wrapper"],
    "--out",
    opts["--output-file"],
    "--no-beautify",
    "--no-convert",
    "--no-delimited",
    "--no-verify",
    ...matched
  ];
  // console.log('pbjsArgs', pbjsArgs);

  const dtsDirName = dirname(opts["--output-file"]);
  const dtsFileName = basename(opts["--output-file"], ".js") + ".d.ts";
  const dtsPath = join(dtsDirName, dtsFileName);

  const pbtsArgs = ["-o", dtsPath, opts["--output-file"]];
  // console.log('pbtsArgs', pbtsArgs);

  try {
    const dirName = dirname(opts["--output-file"]);
    if (dirName.length > 0) {
      await mkdir(dirName, { recursive: true });
    }

    process.stderr.write(
      "Compiling the static protobuf declarations for jomiel messages..."
    );

    const execaOptions = { preferLocal: true };
    await execa("pbjs", pbjsArgs, execaOptions);

    process.stderr.write(" ... ");
    await execa("pbts", pbtsArgs, execaOptions);

    console.error("done.");
  } catch (error) {
    console.error(error.stack || String(error));
    process.exit(1);
  }
})();
